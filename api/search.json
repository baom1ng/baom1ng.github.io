[{"id":"01b2f95cf7b3ad8e6df19f8a3034e6c8","title":"Nginx快速入门","content":"\n\n\n\n\n\n\n\n\n\nNginx(“engine x”)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。在高连接并发的情况下，Nginx是Apache服务器不错的替代品。##安装Nginx这里我用CentOS为例：1.安装先决条件\n$ yum install yum-utils\n2.设置yum存储库，将下面内容写入/etc/yum.repos.d/nginx.repo\n$ vim &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo\n[nginx-stable]\nname&#x3D;nginx stable repo\nbaseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;\ngpgcheck&#x3D;1\nenabled&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;nginx.org&#x2F;keys&#x2F;nginx_signing.key\nmodule_hotfixes&#x3D;true\n3.安装Nginx\n$ yum update\n$ yum install nginx\n4.验证是否安装成功启动Nginx\n$ nginx\n查看端口80已被nginx监听\n$ netstat -ntlp\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      666&#x2F;sshd            \ntcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      799&#x2F;master          \ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      23779&#x2F;nginx: master \ntcp6       0      0 :::22                   :::*                    LISTEN      666&#x2F;sshd            \ntcp6       0      0 ::1:25                  :::*                    LISTEN      799&#x2F;master\n5.设置防火墙如果在浏览器里输入ip地址发现无法访问此网站，那有可能是防火墙80端口没有开放。\n编辑iptables配置文件\n$ vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables\n添加开放80端口\n -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEP\n重启iptables\n$ systemctl restart iptables\n们刷新页面出现Welcome to nginx!说明安装配置成功![welcone nginx.png](/images/Nginx快速入门/welcome to nginx.png)##Nginx常用命令\n$ nginx           — 启动Nginx\n$ nginx -t        — 检查Nginx配置文件\n$ nginx -s stop   — 快速关闭\n$ nginx -s quit   — 正常关闭\n$ nginx -s reload — 重新加载配置文件\n$ nginx -s reopen — 重新打开日志文件\n##Nginx主模块基本命令daemon语法: daemon on | off缺省值:on是否以守护进程的方式运行nginx，守护进程是指脱离终端并且在后台运行的进程，关闭守护进程可以方便我们调试nginx。\ndaemon off;\nmaster_process语法:master_process on | off缺省值:on是否以master/worker方式逬行工作，在实际的环境中nginx是以一个master逬程管理多个worker进程的方式运行的，关闭后nginx就不会fork出worker子进程来处理请求，而是用master进程自身来处理请求worker_processes number;默认1,在master/worker运行方式下worker进程的数目，一般情况下用户要配置与CPU内核数相等的worker进程。\nmaster_process off;\n\n\n\n\n\n\n\n\n\n\n生产环境中不要使用”daemon”和”master_process”指令，这些选项仅用于开发调试。\nerror_log语法:error_log file [ debug | info | notice | warn | error | crit ]缺省值:$&#123;prefix&#125;/logs/error.logNginx 添加 –with-debug 编译参数, 你还能够使用以下配置:\nerror_log LOGFILE [ debug_core | debug_alloc | debug_mutex | debug_event\n]: | debug_http | debug_imap ;\ninclude语法:include file | *缺省值:none你可以在任意地方使用include指令实现配置文件的包含，类似于apache中的include方法，可减少主配置文件。\n```指令还支持像下面配置一样的全局包含的方法，例如包含一个目录下所有以\".conf\"结尾的文件:&#96;&#96;&#96;\ninclude vhosts&#x2F;*.conf;\npid语法:pid file缺省值:compile-time option Example:进程id存储文件。可以使用 kill -HUP cat /var/log/nginx.pid\\ 对Nginx进行配置文件重新加载。\npid &#x2F;var&#x2F;log&#x2F;nginx.pid;\nuser语法:user user [group]缺省值:nobody nobody指定Nginx Worker进程运行用户，默认是nobody帐号。\n例如:\nuser www users;\nworker_processes语法:worker_processes number缺省值:1nginx可以使用多个worker进程，原因如下：\n1.使用SMP2.当工作程序在磁盘I / O上阻塞时减少延迟3.当使用select（）/ poll（）时限制每个进程的连接数\nworker_processes 4;\n##Nginx处理HTTP的核心功能模块\n基本指令alias语法:alias file-path|directory-path;缺省值:no使用字段:location该伪指令分配用于指定位置的路径。 请注意，它看起来类似于root伪指令，但是文档root不会改变，只是用于请求的文件系统路径。\nlocation  &#x2F;i&#x2F; &#123;\n alias   &#x2F;spool&#x2F;w3&#x2F;images&#x2F;;\n&#125;\n# 请求“ &#x2F;i&#x2F;1.jpg”将返回文件“ &#x2F;spool&#x2F;w3&#x2F;images&#x2F;1.jpg\nkeepalive_timeout语法: keepalive_timeout [ time ]缺省值:keepalive_timeout 75使用字段:http, server, location第一个参数为与客户端的保持活动连接分配超时。 在此时间之后，服务器将关闭连接。\n可选的第二个参数指定了答应头Keep-Alive: timeout=time的```time````值，这个值可以使一些浏览器知道什么时候关闭连接，以便使服务器不用重复关闭，如果不指定这个参数，nginx不会在答应头中发送Keep-Alive信息。\n下面列出了一些服务器如何处理包含Keep-Alive的答应头：\n\nMSIE和Opera会忽略“ Keep-Alive：timeout = ”标头。\nMSIE使连接保持活动状态约60-65秒，然后发送TCP RST。\nOpera可以长时间保持连接状态。\nMozilla使连接保持活动状态N大约1-10秒。\nKonqueror使连接保持活动状态约N秒钟。\n\nlisten语法:listen address:port [ default [ backlog=num | rcvbuf=size | sndbuf=size | accept_filter=filter | deferred | bind | ssl ] ]缺省值:listen 80使用字段:serverlisten指令指定封闭服务器{…}块接受的地址和端口。 可以仅指定地址，仅端口或服务器名称作为地址。\nlisten 127.0.0.1:8000;\nlisten 127.0.0.1;\nlisten 8000;\nlisten *:8000;\nlisten localhost:8000;\nIPv6地址（0.7.36）设置：\nlisten [::]:8000; \nlisten [fe80::1];\nlocation语法:location [=|~|~*|^~] /uri/ &#123; ... &#125;缺省值:no使用字段:server这个参数根据URL的不同需求来进行配置，可以使用字符串与正则表达式匹配，如果要使用正则表达式，你必须指定下列前缀：\n\n~*不区分大小写\n～区分大小写location  &#x3D; &#x2F; &#123;\n  # 只匹配 &#x2F; 的查询\n  [ configuration A ] \n&#125;\nlocation  &#x2F; &#123;\n  # 匹配任何以 &#x2F; 开头的查询\n  # 但是正则表达式与一些较长的字符串将首先匹配\n  [ configuration B ] \n&#125;\nlocation ^~ &#x2F;images&#x2F; &#123;\n  # 匹配任何以&#x2F;images&#x2F;开始的查询并且停止搜索，不检查正则表达式\n  [ configuration C ] \n&#125;\nlocation ~* \\.(gif|jpg|jpeg)$ &#123;\n  # 匹配任何以gif,jpg,jpeg结尾的文件，但是所有&#x2F;images&#x2F;目录请求将在Configuration C 中处理\n  [ configuration D ] \n&#125;\n\nresolver_timeout语法:resolver_timeout time使用字段:http,server,location解析超时时间。如：\nresolver_timeout 5s;\nroot语法:root path缺省值:root html使用字段:http,server,location,location中if字段请求到达后的文件根目录\nlocation  &#x2F;i&#x2F;  &#123;\n  root  &#x2F;spool&#x2F;w3\n&#125;\n如果亲求/i/top.jpg文件，nginx将转到/spool/w3/i/top.jpg文件。你可以在参数中使用变量。注意：在亲求中root会添加这个location到它的后面，即/i/top.jpg并不会请求/spool/w3/i/top.jpg文件，如果要实现上述类似与apache alias的功能，可以使用alias指令。server语法:server&#123;...&#125;缺省值:no使用字段:httpserver字段包含虚拟主机的配置。没有明确的机制来分开基于域名（请求中的主机头）和基于IP的虚拟主机。可以通过listen指令来指定必须连接到这个server块的所有地址和端口，并且在server_name指令中可以指定所有的域名。server_name语法:server_name name [...]使用字段:server将HTTP请求的主机头与nginx配置文件中的server字段中指定的参数进行匹配，并且找出第一个匹配结果。\n\n完整的静态名称\n名称开头带有通配符的名称— * .example.com\n名称末尾带有通配符的名称www.example.*\n具有正则表达式的名称\n\n如果不匹配，将根据以下顺序使用配置文件中的[#server服务器{…}]块：\n\nlisten指令被标记为default的server字段\n第一个出现listen的server字段\n\n","slug":"Nginx快速入门","date":"2022-10-19T10:23:05.000Z","categories_index":"","tags_index":"Linux,Nginx","author_index":"Johnny"},{"id":"065300218eb4a63be27d42f44bfa37db","title":"搭建LAMP环境","content":"1搭建 MySQL 数据库安装 MySQL使用 yum 安装 MySQL：\nyum install mysql-server -y\n安装完成后，启动 MySQL 服务：\nservice mysqld restart\n设置 MySQL 账户 root 密码：[?]\n&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password &#39;Password&#39;\n\n2安装 Apache 服务安装 Apache使用 yum 安装 Apache\nyum install httpd -y\n启动 Apache 服务：\nservice httpd start\n3安装 PHP安装 PHP 和 PHP-MYSQL 支持工具：使用 yum 安装 PHP：[?]\nyum install php php-mysql -y\nCentOS 6 默认已经安装了 php-mysql，下面命令执行的可能会提示已经安装。\n4检查安装是否成功检验 PHP 是否安装成功我们在 /var/www/html 目录下创建一个info.php文件来检查php是否安装成功，示例代码参考如下\n示例代码：/var/www/html/info.php\n&lt;?php phpinfo(); ?&gt;\n重启 Apache 服务：\nservice httpd restart\n此时，访问 http://&lt;您的 CVM IP 地址&gt;/info.php 可浏览到我们刚刚创建的 info.php 页面了\n","slug":"搭建LAMP环境","date":"2018-01-21T10:11:41.000Z","categories_index":"","tags_index":"Linux,教程","author_index":"Johnny"},{"id":"d5477574fa77bf54e6e43f047273c678","title":"Samba快速入门","content":"安装Samba[root@localhost ~]# yum install samba -y\n[root@localhost ~]# cd &#x2F;etc&#x2F;samba&#x2F;\n[root@localhost samba]# ls\nlmhosts  smb.conf  smb.conf.example\n[root@localhost samba]# mv smb.conf smb.conf.bak\n[root@localhost samba]# grep -v &quot;#&quot; smb.conf.bak &gt; smb.conf \n\n配置文件smb.conf[root@localhost samba]# vim smb.conf\n\n[global]\n        workgroup &#x3D; SAMBA\n        security &#x3D; user \n\n        passdb backend &#x3D; tdbsam\n\n        printing &#x3D; cups\n        printcap name &#x3D; cups\n        load printers &#x3D; yes\n        cups options &#x3D; raw\n[myshare]\n                ##共享文件目录路径\n                path&#x3D;&#x2F;opt&#x2F;wbm         \n                browseable&#x3D;yes\n                create mask&#x3D;0644\n                directory mask&#x3D;0755\n                ##允许访问的用户\n                valid users&#x3D;wbm\n                ##允许写入的用户\n                write list&#x3D;wbm  \n创建用户[root@localhost samba]#useradd wbm\n给用户设置密码[root@localhost samba]#smbpasswd -a wbm \n列出smb用户列表[root@localhost samba]#pdbedit -L  \nwbm:1000:\n创建Samba共享目录[root@localhost ~]#mkdir &#x2F;opt&#x2F;wbm\n[root@localhost ~]#chmod 777 &#x2F;opt&#x2F;wbm\n[root@localhost ~]#systemctl start smb.service \n挂在samba共享[root@vm22 ~]# mount -t cifs &#x2F;&#x2F;192.168.10.21&#x2F;wbm &#x2F;opt&#x2F;wbm&#x2F; -o username&#x3D;wbm,password&#x3D;qwer1.2.3.\n[root@vm22 ~]# cd &#x2F;opt&#x2F;wbm&#x2F;\n[root@vm22 wbm]# ls\nInstall_nginx.sh\n开机自动挂载[root@vm22 wbm]# vim &#x2F;etc&#x2F;fstab\n\n#在末尾处添加\n\n&#x2F;&#x2F;192.168.10.21 &#x2F;opt&#x2F;wbm    cifs username&#x3D;wbm,password&#x3D;qwer1.2.3. 0 0","slug":"Samba快速入门","date":"2018-01-21T10:11:41.000Z","categories_index":"","tags_index":"Linux,教程","author_index":"Johnny"}]