{"title":"Kubernetes1.27-containerd1.7集群安装","uid":"151d99aa718e6ed80f8a5120c08988a5","slug":"Kubernetes1-27-containerd1-7集群安装","date":"2023-02-19T02:39:13.000Z","updated":"2023-06-18T10:47:59.586Z","comments":true,"path":"api/articles/Kubernetes1-27-containerd1-7集群安装.json","keywords":null,"cover":"/images/Kubernetes1.27-containerd1.7集群安装/kubernets-logo-png-kubernetes-logo-linagora-1920x1080.png","content":"<h1 id=\"Kubernetes1-27-containerd1-7集群安装\"><a href=\"#Kubernetes1-27-containerd1-7集群安装\" class=\"headerlink\" title=\"Kubernetes1.27-containerd1.7集群安装\"></a>Kubernetes1.27-containerd1.7集群安装</h1><img src=\"/images/Kubernetes1.27-containerd1.7集群安装/kubernets-logo-png-kubernetes-logo-linagora-1920x1080.png\" alt=\"Collection of Kubernets Logo PNG. | PlusPNG\" style=\"zoom: 25%;\" />\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">主机名称</th>\n<th>操作系统</th>\n<th>IP地址</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Master</td>\n<td>Ubuntu 22.04.2 LTS</td>\n<td>192.168.10.15</td>\n<td>控制节点</td>\n</tr>\n<tr>\n<td align=\"left\">Work1</td>\n<td>Ubuntu 22.04.2 LTS</td>\n<td>192.168.10.16</td>\n<td>工作节点1</td>\n</tr>\n<tr>\n<td align=\"left\">Work2</td>\n<td>Ubuntu 22.04.2 LTS</td>\n<td>192.168.10.17</td>\n<td>工作节点2</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-安装containerd-所有节点\"><a href=\"#1-安装containerd-所有节点\" class=\"headerlink\" title=\"1.安装containerd(所有节点)\"></a>1.安装containerd(所有节点)</h3><p><strong>根据系统和CPU类型选择cri-containerd-cni文件进行下载。下载完成后，将文件copy至主机。也可以直接使用wget命令下载。</strong></p>\n<p><img src=\"/images/Kubernetes1.27-containerd1.7%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/image-20230612150556837.png\" alt=\"image-20230612150556837\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># step 1: 从github上获取containerd\nsudo wget https:&#x2F;&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;releases&#x2F;download&#x2F;v1.7.2&#x2F;cri-containerd-1.7.2-linux-amd64.tar.gz\n# step 2: 解压\ntar xzf cri-containerd-cni-1.7.2-linux-amd64.tar.gz\n# step 3: 复制配置文件\nsudo cp etc&#x2F;crictl.yaml &#x2F;etc&#x2F;\nsudo cp etc&#x2F;systemd&#x2F;system&#x2F;containerd.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;\n# step 4: 安装containerd 和相关依赖\nsudo cp usr&#x2F;local&#x2F;bin&#x2F;* &#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nsudo cp usr&#x2F;local&#x2F;sbin&#x2F;* &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;\n# step 5: 生成和配置启动文件\nsudo mkdir -p &#x2F;etc&#x2F;containerd\nsudo containerd config default &gt; &#x2F;etc&#x2F;containerd&#x2F;config.toml\nsudo sed -i &#39;s#registry.k8s.io&#x2F;pause:3.6#registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.9#g&#39; &#x2F;etc&#x2F;containerd&#x2F;config.toml\nsudo sed -i &#39;s#SystemdCgroup &#x3D; false#SystemdCgroup &#x3D; true#g&#39;  &#x2F;etc&#x2F;containerd&#x2F;config.toml\n# step 6: 重启containerd并设置开机启动\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n\n<h3 id=\"2-主机初始化配置-所有节点\"><a href=\"#2-主机初始化配置-所有节点\" class=\"headerlink\" title=\"2.主机初始化配置(所有节点)\"></a>2.主机初始化配置(所有节点)</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 集群主机名\nsudo su\n# 使用sudo执行会失败，切换root\necho &quot;192.168.10.15  master&quot; &gt;&gt; &#x2F;etc&#x2F;hosts\necho &quot;192.168.10.16  work1&quot; &gt;&gt; &#x2F;etc&#x2F;hosts\necho &quot;192.168.10.17  work2&quot; &gt;&gt; &#x2F;etc&#x2F;hosts\n# 交换分区\nsudo sed -i &#39;s&#x2F;^\\(.*swap.*\\)$&#x2F;#\\1&#x2F;g&#39; &#x2F;etc&#x2F;fstab\nsudo swapoff -a\n# 网络内核模块\nsudo tee &#x2F;etc&#x2F;modules-load.d&#x2F;containerd.conf &lt;&lt;EOF\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# 数据包转发\nsudo tee &#x2F;etc&#x2F;sysctl.d&#x2F;kubernetes.conf &lt;&lt;EOF\nnet.bridge.bridge-nf-call-ip6tables &#x3D; 1\nnet.bridge.bridge-nf-call-iptables &#x3D; 1\nnet.ipv4.ip_forward &#x3D; 1\nEOF\n\nsudo sysctl --system\n# 配置 Kubernetes 集群相关的防火墙规则\n# 在主节点执行：\nsudo ufw allow 6443&#x2F;tcp\nsudo ufw allow 2379&#x2F;tcp\nsudo ufw allow 2380&#x2F;tcp\nsudo ufw allow 10250&#x2F;tcp\nsudo ufw allow 10251&#x2F;tcp\nsudo ufw allow 10252&#x2F;tcp\nsudo ufw allow 10255&#x2F;tcp\nsudo ufw reload\n# 在工作节点执行：\nsudo ufw allow 10250&#x2F;tcp\nsudo ufw allow 30000:32767&#x2F;tcp\nsudo ufw reload\n# k8s源\nsudo apt update\nsudo apt install -y apt-transport-https\n# 使用sudo执行会失败，切换root\nsudo su\ncurl https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | apt-key add - \ncat &lt;&lt;EOF &gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list\ndeb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F; kubernetes-xenial main\nEOF\n# 安装k8s\nsudo apt update\nsudo apt install -y kubelet kubeadm kubectl</code></pre>\n\n<h3 id=\"3-修改crictl配置文件-所有节点\"><a href=\"#3-修改crictl配置文件-所有节点\" class=\"headerlink\" title=\"3.修改crictl配置文件(所有节点)\"></a>3.修改crictl配置文件(所有节点)</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 修改crictl配置文件，获得containerd的sock信息，没有该文件的话创建一个\ncat &#x2F;etc&#x2F;crictl.yaml \nruntime-endpoint: unix:&#x2F;&#x2F;&#x2F;run&#x2F;containerd&#x2F;containerd.sock\nimage-endpoint: unix:&#x2F;&#x2F;&#x2F;run&#x2F;containerd&#x2F;containerd.sock\ntimeout: 10\ndebug: false</code></pre>\n\n<h3 id=\"4-初始化-控制节点\"><a href=\"#4-初始化-控制节点\" class=\"headerlink\" title=\"4.初始化(控制节点)\"></a>4.初始化(控制节点)</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo kubeadm init --kubernetes-version&#x3D;1.27.2 --apiserver-advertise-address&#x3D;192.168.10.15 --apiserver-bind-port&#x3D;6443 --image-repository&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers --service-cidr&#x3D;10.96.0.0&#x2F;12 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 --cri-socket&#x3D;unix:&#x2F;&#x2F;&#x2F;run&#x2F;containerd&#x2F;containerd.sock\n#apiserver-advertise-address需要使用本机上网卡的ip，否则的话会导致etcd绑定ip失败启动不了，从而apiserver也启动不了</code></pre>\n\n<p><strong>初始化成功，显示如下信息</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Your Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME&#x2F;.kube\n  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\n  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:\n  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.10.15:6443 --token vo2r54.7jdugv0ivp91po0w \\\n\t--discovery-token-ca-cert-hash sha256:2b6ec05aa042aab6f2f51d6b9052fa062e265dc68707d416a7e341c05e79bd58\n</code></pre>\n\n<p><strong>执行上面的提示的命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkdir -p $HOME&#x2F;.kube\nsudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\nsudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</code></pre>\n\n<p><strong>执行kubectl get node我们可以看到节点处于NotReady状态，需要安装flannel</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get node\nNAME     STATUS     ROLES           AGE   VERSION\nmaster   NotReady   control-plane   42m   v1.27.2\n# 使用kubectl安装flannel\nkubectl apply -f https:&#x2F;&#x2F;github.com&#x2F;flannel-io&#x2F;flannel&#x2F;releases&#x2F;latest&#x2F;download&#x2F;kube-flannel.yml</code></pre>\n\n<p><strong>如果网络无法访问github可以手动创建kube-flannel.yml</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    k8s-app: flannel\n    pod-security.kubernetes.io&#x2F;enforce: privileged\n  name: kube-flannel\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    k8s-app: flannel\n  name: flannel\n  namespace: kube-flannel\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRole\nmetadata:\n  labels:\n    k8s-app: flannel\n  name: flannel\nrules:\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - pods\n  verbs:\n  - get\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - nodes&#x2F;status\n  verbs:\n  - patch\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - clustercidrs\n  verbs:\n  - list\n  - watch\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    k8s-app: flannel\n  name: flannel\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: flannel\nsubjects:\n- kind: ServiceAccount\n  name: flannel\n  namespace: kube-flannel\n---\napiVersion: v1\ndata:\n  cni-conf.json: |\n    &#123;\n      &quot;name&quot;: &quot;cbr0&quot;,\n      &quot;cniVersion&quot;: &quot;0.3.1&quot;,\n      &quot;plugins&quot;: [\n        &#123;\n          &quot;type&quot;: &quot;flannel&quot;,\n          &quot;delegate&quot;: &#123;\n            &quot;hairpinMode&quot;: true,\n            &quot;isDefaultGateway&quot;: true\n          &#125;\n        &#125;,\n        &#123;\n          &quot;type&quot;: &quot;portmap&quot;,\n          &quot;capabilities&quot;: &#123;\n            &quot;portMappings&quot;: true\n          &#125;\n        &#125;\n      ]\n    &#125;\n  net-conf.json: |\n    &#123;\n      &quot;Network&quot;: &quot;10.244.0.0&#x2F;16&quot;,\n      &quot;Backend&quot;: &#123;\n        &quot;Type&quot;: &quot;vxlan&quot;\n      &#125;\n    &#125;\nkind: ConfigMap\nmetadata:\n  labels:\n    app: flannel\n    k8s-app: flannel\n    tier: node\n  name: kube-flannel-cfg\n  namespace: kube-flannel\n---\napiVersion: apps&#x2F;v1\nkind: DaemonSet\nmetadata:\n  labels:\n    app: flannel\n    k8s-app: flannel\n    tier: node\n  name: kube-flannel-ds\n  namespace: kube-flannel\nspec:\n  selector:\n    matchLabels:\n      app: flannel\n      k8s-app: flannel\n  template:\n    metadata:\n      labels:\n        app: flannel\n        k8s-app: flannel\n        tier: node\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: kubernetes.io&#x2F;os\n                operator: In\n                values:\n                - linux\n      containers:\n      - args:\n        - --ip-masq\n        - --kube-subnet-mgr\n        command:\n        - &#x2F;opt&#x2F;bin&#x2F;flanneld\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: EVENT_QUEUE_DEPTH\n          value: &quot;5000&quot;\n        image: docker.io&#x2F;flannel&#x2F;flannel:v0.22.0\n        name: kube-flannel\n        resources:\n          requests:\n            cpu: 100m\n            memory: 50Mi\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n          privileged: false\n        volumeMounts:\n        - mountPath: &#x2F;run&#x2F;flannel\n          name: run\n        - mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;\n          name: flannel-cfg\n        - mountPath: &#x2F;run&#x2F;xtables.lock\n          name: xtables-lock\n      hostNetwork: true\n      initContainers:\n      - args:\n        - -f\n        - &#x2F;flannel\n        - &#x2F;opt&#x2F;cni&#x2F;bin&#x2F;flannel\n        command:\n        - cp\n        image: docker.io&#x2F;flannel&#x2F;flannel-cni-plugin:v1.1.2\n        name: install-cni-plugin\n        volumeMounts:\n        - mountPath: &#x2F;opt&#x2F;cni&#x2F;bin\n          name: cni-plugin\n      - args:\n        - -f\n        - &#x2F;etc&#x2F;kube-flannel&#x2F;cni-conf.json\n        - &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;10-flannel.conflist\n        command:\n        - cp\n        image: docker.io&#x2F;flannel&#x2F;flannel:v0.22.0\n        name: install-cni\n        volumeMounts:\n        - mountPath: &#x2F;etc&#x2F;cni&#x2F;net.d\n          name: cni\n        - mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;\n          name: flannel-cfg\n      priorityClassName: system-node-critical\n      serviceAccountName: flannel\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: &#x2F;run&#x2F;flannel\n        name: run\n      - hostPath:\n          path: &#x2F;opt&#x2F;cni&#x2F;bin\n        name: cni-plugin\n      - hostPath:\n          path: &#x2F;etc&#x2F;cni&#x2F;net.d\n        name: cni\n      - configMap:\n          name: kube-flannel-cfg\n        name: flannel-cfg\n      - hostPath:\n          path: &#x2F;run&#x2F;xtables.lock\n          type: FileOrCreate\n        name: xtables-lock\n</code></pre>\n\n<p><strong>执行完后，查看flannel是否启动成功</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get pods -n kube-flannel\nNAME                    READY   STATUS    RESTARTS      AGE\nkube-flannel-ds-7vqgt   1&#x2F;1     Running   0             32m\nkube-flannel-ds-b9n72   1&#x2F;1     Running   3 (84s ago)   8m20s</code></pre>\n\n<p><strong>查看节点状态,显示ready</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get node\nNAME     STATUS   ROLES           AGE   VERSION\nmaster   Ready    control-plane   86m   v1.27.2\nwork1    Ready    &lt;none&gt;          15m   v1.27.2</code></pre>\n\n<h3 id=\"5-将work节点加入集群-所有work节点\"><a href=\"#5-将work节点加入集群-所有work节点\" class=\"headerlink\" title=\"5.将work节点加入集群(所有work节点)\"></a>5.将work节点加入集群(所有work节点)</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo kubeadm join 192.168.10.15:6443 --token 6zw8z1.7j90zp477rv2kct6 --discovery-token-ca-cert-hash sha256:2b6ec05aa042aab6f2f51d6b9052fa062e265dc68707d416a7e341c05e79bd58</code></pre>\n\n<p><strong>执行完成后我们再主节点产看nodes</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get  nodes\nNAME     STATUS   ROLES           AGE     VERSION\nmaster   Ready    control-plane   96m     v1.27.2\nwork1    Ready    &lt;none&gt;          25m     v1.27.2\nwork2    Ready    &lt;none&gt;          7m25s   v1.27.2</code></pre>\n\n<p><strong>这里显示所有节点Ready表示k8s集群安装成功</strong></p>\n","feature":true,"text":"Kubernetes1.27-containerd1.7集群安装 主机名称 操作系统 IP地址 说明 Master Ubuntu 22.04.2 LTS 192.168.10.15 控制节点 Work1 Ubuntu 22.04.2 LTS 192.168.10.16 工作节点1...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Kubernetes","slug":"Kubernetes","count":1,"path":"api/categories/Kubernetes.json"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":1,"path":"api/tags/Kubernetes.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Kubernetes1-27-containerd1-7%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Kubernetes1.27-containerd1.7集群安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85containerd-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">1.安装containerd(所有节点)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%BB%E6%9C%BA%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">2.主机初始化配置(所有节点)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BF%AE%E6%94%B9crictl%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">3.修改crictl配置文件(所有节点)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%88%9D%E5%A7%8B%E5%8C%96-%E6%8E%A7%E5%88%B6%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">4.初始化(控制节点)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%B0%86work%E8%8A%82%E7%82%B9%E5%8A%A0%E5%85%A5%E9%9B%86%E7%BE%A4-%E6%89%80%E6%9C%89work%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">5.将work节点加入集群(所有work节点)</span></a></li></ol></li></ol></li></ol>","author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Docker-Compose","uid":"0361f9a39ac53c480f13924da3215802","slug":"Docker-Compose","date":"2022-10-16T02:38:51.000Z","updated":"2022-10-26T04:21:20.610Z","comments":true,"path":"api/articles/Docker-Compose.json","keywords":null,"cover":"/images/docker-compose.jpg","text":"简介Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 OpenStack 中的 Heat 十分类似。 其代码目前在 https://github.com/docker/compose 上开源。 Compose 定位...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"Docker","slug":"Docker","count":6,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"}],"author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}