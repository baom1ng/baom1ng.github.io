{"title":"Docker相关技术简介","uid":"ae3533aad9ffb390f0136b0f330276f7","slug":"Docker相关技术简介","date":"2020-05-12T14:14:20.000Z","updated":"2022-10-24T03:34:50.335Z","comments":true,"path":"api/articles/Docker相关技术简介.json","keywords":null,"cover":"/images/docker/docker.png","content":"<p><img src=\"/images/docker/docker.png\" alt=\"Docker1.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Docker 是一个开源的应用容器引擎，基于Go 语言并遵从 Apache2.0 协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p></blockquote>\n<h2 id=\"Docker简介\"><a href=\"#Docker简介\" class=\"headerlink\" title=\"Docker简介\"></a>Docker简介</h2><p><strong>什么是容器？</strong><br>容器是一种虚拟化解决方案，相对于传统虚拟机不同。传统的虚拟机是用中间层，将一台或多台独立的机器虚拟运行在硬件之上。而容器则是直接运行操作系统之上的用户空间，因此容器虚拟又被称为操作系统虚拟化。由于容器依赖于操作系统的特性，因此容器只能运行相同或相似内核的操作系统。</p>\n<p><strong>Docker使用的技术依赖于Linux内核的Namespace和Cgroups (Control Group) 等特性，所以Docker容器只能运行Linux类系统而不能运行Windows系统。这也是容器技术相对虚拟机技术系统灵活性上的劣势。</strong></p>\n<p><img src=\"/images/docker/docker2.jpg\" alt=\"Docker与传统虚拟机.jpg\"></p>\n<h2 id=\"Docker与虚拟机对比\"><a href=\"#Docker与虚拟机对比\" class=\"headerlink\" title=\"Docker与虚拟机对比\"></a>Docker与虚拟机对比</h2><ul>\n<li><p>启动速度<br><code>启动虚拟机需要先启动虚拟机的操作系统，再启动应用，这个过程非常慢。启动Docker相当于启动宿主机操作系统上的一个进程，为秒级别。</code></p>\n</li>\n<li><p>资源占用更小<br><code>从图中我们可以看到，使用虚拟机部署应用不但包含了应用和其所依赖的库，还包含了完整的操作系统;占用大量的磁盘空间、内存和CPU资源。Docker只需要应用和其依赖的库，在运行时占用很少的资源。</code></p>\n</li>\n<li><p>镜像与容器<br><code>镜像是一种静态的结构，可以看成面向对象里面的类，而容器是镜像的一个实例。</code><br><code>镜像包含着容器运行时所需要的代码以及其它组件，它是一种分层结构，每一层都是只读的（read-only layers）。</code><br><code>构建镜像时，会一层一层构建，前一层是后一层的基础。镜像的这种分层存储结构很适合镜像的复用以及定制。</code><br><code>构建容器时，通过在镜像的基础上添加一个可写层（writable layer），用来保存着容器运行过程中的修改。</code><br><img src=\"/images/docker/DockerAUFS.jpeg\" alt=\"DockerAUFS.jpeg\"></p>\n</li>\n</ul>\n<h2 id=\"Docker的特点\"><a href=\"#Docker的特点\" class=\"headerlink\" title=\"Docker的特点\"></a>Docker的特点</h2><ul>\n<li><p>提供简单轻量的建模方式<br><code>用户只需要几分钟就可以将自己的程序Docker化。大多是Docker容器只需要不到一秒就可以启动。由于去除了管理程序的开销，Docker容器拥有更高的性能，同时一台宿主机中也可以运行更多的容器。使用户可以尽可能的利用系统资源。</code></p>\n</li>\n<li><p>职责的逻辑分离<br><code>使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心管理容器。</code></p>\n</li>\n<li><p>快速高效的发开周期<br><code>缩短代码从开发到测试到部署上线运行的周期，让应用具备可移植性。在容器中开发也就避免额外的调试、和部署上的开销，这样就有效的缩短了产品上线的周期。</code></p>\n</li>\n<li><p>鼓励使用面向服务的架构<br><code>Docker推荐单个容易只运行一个容器，这样就形成一个分布式的应用程序模型。在这样的模型下，应用程序和服务可以表现为一系列内部互联的容器，从而使分布式应用程序扩展或调试应用程序都变得非常简单。</code></p>\n</li>\n</ul>\n<h2 id=\"Docker的使用场景\"><a href=\"#Docker的使用场景\" class=\"headerlink\" title=\"Docker的使用场景\"></a>Docker的使用场景</h2><ol>\n<li>使用Docker容器开发、测试、部署服务</li>\n<li>创建隔离的运行环境</li>\n<li>搭建测试环境</li>\n<li>构建多用户的平台服务(PaaS)基础设施</li>\n<li>提供软件即服务(SaaS)应用程序</li>\n<li>高性能、超大规模的宿主机部署</li>\n</ol>\n<h2 id=\"Docker优缺点\"><a href=\"#Docker优缺点\" class=\"headerlink\" title=\"Docker优缺点\"></a>Docker优缺点</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参考链接:<a href=\"https://cloud.tencent.com/developer/article/1457282\">https://cloud.tencent.com/developer/article/1457282</a></p></blockquote>\n<ol>\n<li>部署方便</li>\n</ol>\n<p>搭建环境这一步往往会耗费我们好几个小时的时间，而且其中一个小问题可能需要找很久才能够解决。你还会得到关于环境搭建方面的团队其他成员的求助。而有了容器之后，这些都变得非常容易，你的开发环境就只是一个或者几个容器镜像的地址，最多再需要一个控制部署流程的执行脚本。<br>2. 部署安全</p>\n<p>当我们收到一个bug反馈的时候，很多时候心里面的第一反应一定是“我本地是好的啊”！ 这种情况的发生就在于环境的不一致，我们在开发过程中的调试往往不能保证其他环境的问题，但是我们却要为此买单，这真是一件令人苦恼的事情。有了容器之后，这将很少发生。我们可以通过容器技术将开发环境和测试环境以及生产环境保持版本和依赖上的统一，保证代码在一个高度统一的环境上执行。而测试环境的统一，也同样能解决CI流程对环境的要求。</p>\n<p>分布式技术和扩容需求日益增长的今天，如果运维能够使用容器技术来进行环境的部署，不仅仅在部署时间上节省不少，也能把很多因为人工配置环境产生的失误降到最低。</p>\n<ol start=\"3\">\n<li>隔离性好</li>\n</ol>\n<p>不管是开发还是生产，往往我们一台机器上可能需要跑多个服务，而服务各自需要的依赖配置不尽相同，假如说两个应用需要使用同一个依赖，或者两个应用需要的依赖之间会有一些冲突，这个时候就很容易出现问题了。 所以同一台服务器上不同应用提供的不同服务，最好还是将其隔离起来。而容器在这方面有天生的优势，每一个容器就是一个隔离的环境，你对容器内部提供服务的要求，容器可以自依赖的全部提供。这种高内聚的表现可以实现快速的分离有问题的服务，在一些复杂系统中能实现快速排错和及时处理。(当然需要说明的是，这个隔离性只是相对于服务器比较的，虚机技术要拥有更好的隔离性)</p>\n<ol start=\"4\">\n<li>快速回滚</li>\n</ol>\n<p>容器之前的回滚机制，一般需要基于上个版本的应用重新部署，且替换掉目前的问题版本。在最初的时代，可能是一套完整的开发到部署的流程，而执行这一套流程往往需要很长的时间。在基于git的环境中，可能是回退某个历史提交，然后重新部署。这些跟容器技术相比都不够快，而且可能会引起新的问题（因为是基于新版本的修改）。而容器技术天生带有回滚属性，因为每个历史容器或者镜像都会有保存，而替换一个容器或者某个历史镜像是非常快速和简单的。</p>\n<ol start=\"5\">\n<li>成本低</li>\n</ol>\n<p>这可能是一个最明显和有用的优点了，在容器出现之前，我们往往构筑一个应用就需要一台新的服务器或者一台虚机。服务器的购置成本和运维成本都很高，而虚机需要占用很多不必要的资源。相比之下，容器技术就小巧轻便的多，只需要给一个容器内部构建应用需要的依赖就可以了，这也是容器技术发展迅速的最主要原因。</p>\n<ol start=\"6\">\n<li>管理成本更低</li>\n</ol>\n<p>随着容器技术的不断普及和发展，随之而来的容器管理和编排技术也同样得到发展。诸如Docker Swarm，Kubernetes, Mesos等编排工具也在不断的迭代更新，这让容器技术在生产环境中拥有了更多的可能性和更大的发挥空间。而随着大环境的发展，docker等容器的使用和学习的成本也是愈发降低，成为更多开发者和企业的选择。</p>\n<p><strong>说了这么多的优点，容器也有一些问题是没有解决的。上一代方案基本就是基于虚机技术的云方案，能有效增加服务器的使用效率，达到节省成本的目的，而容器技术在此基础上更进一步地优化了资源的使用率。但是仍然有一些问题，是我们在选择服务资源架构场景中需要考虑的：</strong></p>\n<ol>\n<li> 隔离性</li>\n</ol>\n<p>基于hypervisor的虚机技术，在隔离性上比容器技术要更好，它们的系统硬件资源完全是虚拟化的，当一台虚机出现系统级别的问题，往往不会蔓延到同一宿主机上的其他虚机。但是容器就不一样了，容器之间共享同一个操作系统内核以及其他组件，所以在收到攻击之类的情况发生时，更容易通过底层操作系统影响到其他容器。当然，这个问题可以通过在虚机中部署容器来解决，可是这样又会引出新的问题，比如成本的增加以及下面要提到的问题：性能。</p>\n<ol start=\"2\">\n<li>性能</li>\n</ol>\n<p>不管是虚机还是容器，都是运用不同的技术，对应用本身进行了一定程度的封装和隔离，在降低应用和应用之间以及应用和环境之间的耦合性上做了很多努力，但是随机而来的，就会产生更多的网络连接转发以及数据交互，这在低并发系统上表现不会太明显，而且往往不会成为一个应用的瓶颈（可能会分散于不同的虚机或者服务器上），但是当同一虚机或者服务器下面的容器需要更高并发量支撑的时候，也就是并发问题成为应用瓶颈的时候，容器会将这个问题放大，所以，并不是所有的应用场景都是适用于容器技术的。</p>\n<ol start=\"3\">\n<li>存储方案</li>\n</ol>\n<p>容器的诞生并不是为OS抽象服务的，这是它和虚机最大的区别，这样的基因意味着容器天生是为应用环境做更多的努力，容器的伸缩也是基于容器的这一disposable特性，而与之相对的，需要持久化存储方案恰恰相反。这一点docker容器提供的解决方案是利用volume接口形成数据的映射和转移，以实现数据持久化的目的。但是这样同样也会造成一部分资源的浪费和更多交互的发生，不管是映射到宿主机上还是到网络磁盘，都是退而求其次的解决方案。</p>\n<p>随着硬件技术和网络技术的迭代发展，容器技术的缺点会变得越来越不那么明显，而且随着容器技术的发展和普及，对应的解决方案也会越来越多。所以总体来看，docker等容器技术会朝着更加普及的趋势走近我们技术领域。 也希望每一位热爱技术的小伙伴们能更加了解这些新技术，让它们能够更好的为我们服务。</p>\n","feature":true,"text":" Docker 是一个开源的应用容器引擎，基于Go 语言并遵从 Apache2.0 协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 Docker简介什么是容器？容器是一种虚拟化...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Docker","slug":"Docker","count":6,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">Docker简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">Docker与虚拟机对比</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">Docker的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">Docker的使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">Docker优缺点</span></a></li></ol>","author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Docker的安装和部署","uid":"8e903f5d8f6275843e8b600d4505da68","slug":"Docker的安装和部署","date":"2020-05-26T09:33:20.000Z","updated":"2022-10-24T03:46:08.359Z","comments":true,"path":"api/articles/Docker的安装和部署.json","keywords":null,"cover":"/images/docker/docker.png","text":" 在Ubuntu中安装Docker要安装Docker Engine，您需要以下Ubuntu版本之一的64位版本： Ubuntu Eoan 19.10 Ubuntu Bionic 18.04（LTS） Ubuntu Xenial 16.04（LTS） 其他最新版本 安装前的检查 检...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Docker","slug":"Docker","count":6,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"}],"author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Frp内网穿透","uid":"70dd287eea3c3b1a2c451ddd5cf0b7eb","slug":"Frp内网穿透","date":"2020-05-08T07:02:40.000Z","updated":"2022-10-24T03:10:10.357Z","comments":true,"path":"api/articles/Frp内网穿透.json","keywords":null,"cover":"/images/frp.png","text":"Frp内网穿透Frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。项目地址：https://github.com/fatedier/frp 安装FrpFRP 采用 Go...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"教程","slug":"教程","count":3,"path":"api/categories/教程.json"}],"tags":[{"name":"-Linux -教程","slug":"Linux-教程","count":1,"path":"api/tags/Linux-教程.json"}],"author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}