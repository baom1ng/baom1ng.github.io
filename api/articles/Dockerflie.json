{"title":"Dockerfile","uid":"75603112ad785d198fb30f0b34b1d632","slug":"Dockerflie","date":"2022-10-01T06:21:20.000Z","updated":"2022-10-24T07:59:30.784Z","comments":true,"path":"api/articles/Dockerflie.json","keywords":null,"cover":"/images/Dockerflie/image-20221024134827132.png","content":"<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><h3 id=\"1-什么是Dockerfile\"><a href=\"#1-什么是Dockerfile\" class=\"headerlink\" title=\"1. 什么是Dockerfile\"></a>1. 什么是Dockerfile</h3><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p>\n<p><img src=\"/images/Dockerflie/image-20221024134827132.png\" alt=\"image-20221024134827132\"></p>\n<ul>\n<li><strong>通过架构图可以看出通过DockerFile可以直接构建镜像</strong></li>\n</ul>\n<h3 id=\"2-Dockerfile解析过程\"><a href=\"#2-Dockerfile解析过程\" class=\"headerlink\" title=\"2. Dockerfile解析过程\"></a>2. Dockerfile解析过程</h3><p><img src=\"/images/Dockerflie/image-20200603181253804.png\" alt=\"image-20200603181253804\"></p>\n<h3 id=\"3-Dockerfile的保留命令\"><a href=\"#3-Dockerfile的保留命令\" class=\"headerlink\" title=\"3 .Dockerfile的保留命令\"></a>3 .Dockerfile的保留命令</h3><p>官方说明:<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n<table>\n<thead>\n<tr>\n<th>保留字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>FROM</strong></td>\n<td><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td>\n</tr>\n<tr>\n<td>MAINTAINER</td>\n<td>镜像维护者的姓名和邮箱地址</td>\n</tr>\n<tr>\n<td><strong>RUN</strong></td>\n<td><strong>构建镜像时需要运行的指令</strong></td>\n</tr>\n<tr>\n<td><strong>EXPOSE</strong></td>\n<td><strong>当前容器对外暴露出的端口号</strong></td>\n</tr>\n<tr>\n<td><strong>WORKDIR</strong></td>\n<td><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td>\n</tr>\n<tr>\n<td><strong>ENV</strong></td>\n<td><strong>用来在构建镜像过程中设置环境变量</strong></td>\n</tr>\n<tr>\n<td><strong>ADD</strong></td>\n<td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td>\n</tr>\n<tr>\n<td><strong>COPY</strong></td>\n<td><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td>\n</tr>\n<tr>\n<td><strong>VOLUME</strong></td>\n<td><strong>容器数据卷，用于数据保存和持久化工作</strong></td>\n</tr>\n<tr>\n<td><strong>CMD</strong></td>\n<td><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td>\n</tr>\n<tr>\n<td><strong>ENTRYPOINT</strong></td>\n<td><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-1-FROM-命令\"><a href=\"#3-1-FROM-命令\" class=\"headerlink\" title=\"3.1 FROM 命令\"></a>3.1 FROM 命令</h4><ul>\n<li><p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">FROM  &lt;image&gt;\nFROM  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latest\nFROM  &lt;image&gt;[@&lt;digest&gt;]  使用摘要</code></pre></li>\n</ul>\n<h4 id=\"3-2-MAINTAINER-命令\"><a href=\"#3-2-MAINTAINER-命令\" class=\"headerlink\" title=\"3.2 MAINTAINER  命令\"></a>3.2 MAINTAINER  命令</h4><ul>\n<li><p>镜像维护者的姓名和邮箱地址[废弃]</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">MAINTAINER &lt;name&gt;</code></pre></li>\n</ul>\n<h4 id=\"3-3-RUN-命令\"><a href=\"#3-3-RUN-命令\" class=\"headerlink\" title=\"3.3 RUN 命令\"></a>3.3 RUN 命令</h4><ul>\n<li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">RUN &lt;command&gt; (shell form, the command is run in a shell, which by default is &#x2F;bin&#x2F;sh -c on Linux or cmd &#x2F;S &#x2F;C on Windows)\nRUN echo hello\n\nRUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (exec form)\nRUN [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code></pre></li>\n</ul>\n<h4 id=\"3-4-EXPOSE-命令\"><a href=\"#3-4-EXPOSE-命令\" class=\"headerlink\" title=\"3.4 EXPOSE 命令\"></a>3.4 EXPOSE 命令</h4><ul>\n<li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">EXPOSE 80&#x2F;tcp  如果没有显示指定则默认暴露都是tcp\nEXPOSE 80&#x2F;udp</code></pre></li>\n</ul>\n<h4 id=\"3-5-CMD-命令\"><a href=\"#3-5-CMD-命令\" class=\"headerlink\" title=\"3.5 CMD 命令\"></a>3.5 CMD 命令</h4><ul>\n<li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p>\n</li>\n<li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec form, this is the preferred form)\nCMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)\nCMD command param1 param2 (shell form)</code></pre></li>\n</ul>\n<h4 id=\"3-6-WORKDIR-命令\"><a href=\"#3-6-WORKDIR-命令\" class=\"headerlink\" title=\"3.6 WORKDIR 命令\"></a>3.6 WORKDIR 命令</h4><ul>\n<li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">WORKDIR &#x2F;path&#x2F;to&#x2F;workdir\n\nWORKDIR &#x2F;a\nWORKDIR b\nWORKDIR c\n&#96;注意:WORKDIR指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对&#96;</code></pre></li>\n</ul>\n<h4 id=\"3-7-ENV-命令\"><a href=\"#3-7-ENV-命令\" class=\"headerlink\" title=\"3.7 ENV 命令\"></a>3.7 ENV 命令</h4><ul>\n<li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p>\n</li>\n<li><p>语法：</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">ENV &lt;key&gt; &lt;value&gt;\nENV &lt;key&gt;&#x3D;&lt;value&gt; ...</code></pre></li>\n</ul>\n<h4 id=\"3-8-ADD-命令\"><a href=\"#3-8-ADD-命令\" class=\"headerlink\" title=\"3.8 ADD 命令\"></a>3.8 ADD 命令</h4><ul>\n<li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">ADD hom* &#x2F;mydir&#x2F;       通配符添加多个文件\nADD hom?.txt &#x2F;mydir&#x2F;   通配符添加\nADD test.txt relativeDir&#x2F;  可以指定相对路径\nADD test.txt &#x2F;absoluteDir&#x2F; 也可以指定绝对路径\nADD url </code></pre></li>\n</ul>\n<h4 id=\"3-9-COPY-命令\"><a href=\"#3-9-COPY-命令\" class=\"headerlink\" title=\"3.9 COPY 命令\"></a>3.9 COPY 命令</h4><ul>\n<li><p>用来将context目录中指定文件复制到镜像的指定目录中</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">COPY src dest\nCOPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></pre></li>\n</ul>\n<h4 id=\"3-10-VOLUME-命令\"><a href=\"#3-10-VOLUME-命令\" class=\"headerlink\" title=\"3.10 VOLUME 命令\"></a>3.10 VOLUME 命令</h4><ul>\n<li><p>用来定义容器运行时可以挂在到宿主机的目录</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">VOLUME [&quot;&#x2F;data&quot;]</code></pre></li>\n</ul>\n<h4 id=\"3-11-ENTRYPOINT命令\"><a href=\"#3-11-ENTRYPOINT命令\" class=\"headerlink\" title=\"3.11 ENTRYPOINT命令\"></a>3.11 ENTRYPOINT命令</h4><ul>\n<li><p>用来指定容器启动时执行命令和CMD类似</p>\n</li>\n<li><p>语法:</p>\n  <pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">[&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]\nENTRYPOINT command param1 param2</code></pre>\n\n<p>  ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br>  CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p>\n</li>\n</ul>\n<h2 id=\"Dockerfile构建HEXO项目部署\"><a href=\"#Dockerfile构建HEXO项目部署\" class=\"headerlink\" title=\"Dockerfile构建HEXO项目部署\"></a>Dockerfile构建HEXO项目部署</h2><h4 id=\"1-编写Dockerfile\"><a href=\"#1-编写Dockerfile\" class=\"headerlink\" title=\"1.编写Dockerfile\"></a>1.编写Dockerfile</h4><pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">FROM centos:7\nRUN [&quot;yum&quot;,&quot;install&quot;,&quot;-y&quot;,&quot;git&quot;,&quot;vim&quot;]\nWORKDIR &#x2F;home&#x2F;hexo\nEXPOSE 4000\n#安装nodejs\nADD https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v16.13.2&#x2F;node-v16.13.2-linux-x64.tar.xz &#x2F;home\nRUN mkdir -p &#x2F;usr&#x2F;local&#x2F;lib&#x2F;nodejs\nRUN tar -xJvf &#x2F;home&#x2F;node*.tar.xz\nRUN mv node-*-linux-x64 &#x2F;usr&#x2F;local&#x2F;nodejs \nENV PATH&#x3D;$PATH:&#39;&#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;bin&#39;\n#安装hexo\nRUN npm install hexo-cli -g\nENV PATH&#x3D;&quot;$PATH:.&#x2F;node_modules&#x2F;.bin&quot;\nRUN hexo init\nCMD hexo server</code></pre>\n\n<h4 id=\"2-构建镜像\"><a href=\"#2-构建镜像\" class=\"headerlink\" title=\"2.构建镜像\"></a>2.构建镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost ems]# docker build -t hexo1.0 .</code></pre>\n\n<h4 id=\"3-运行镜像\"><a href=\"#3-运行镜像\" class=\"headerlink\" title=\"3.运行镜像\"></a>3.运行镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost ems]# docker run -d -p 8080:4000 --name hexo hexo1.0</code></pre>\n\n<h4 id=\"4-访问项目\"><a href=\"#4-访问项目\" class=\"headerlink\" title=\"4.访问项目\"></a>4.访问项目</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">http:&#x2F;&#x2F;127.0.0.1:4000</code></pre>\n\n\n\n<p><img src=\"/images/Dockerflie/image-20221024140355495.png\" alt=\"image-20221024140355495\"></p>\n","feature":true,"text":"Dockerfile1. 什么是DockerfileDockerfile可以认为是Docker镜像的描述文件，是由一系列命令和参数构成的脚本。主要作用是用来构建docker镜像的构建文件。 通过架构图可以看出通过DockerFile可以直接构建镜像 2. Dockerfile解析...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Docker","slug":"Docker","count":6,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Dockerfile\"><span class=\"toc-text\">Dockerfile</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AFDockerfile\"><span class=\"toc-text\">1. 什么是Dockerfile</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Dockerfile%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">2. Dockerfile解析过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Dockerfile%E7%9A%84%E4%BF%9D%E7%95%99%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3 .Dockerfile的保留命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-FROM-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.1 FROM 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-MAINTAINER-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.2 MAINTAINER  命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-RUN-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.3 RUN 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-EXPOSE-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.4 EXPOSE 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-CMD-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.5 CMD 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-WORKDIR-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.6 WORKDIR 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-ENV-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.7 ENV 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-8-ADD-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.8 ADD 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-9-COPY-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.9 COPY 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-10-VOLUME-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.10 VOLUME 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-11-ENTRYPOINT%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.11 ENTRYPOINT命令</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Dockerfile%E6%9E%84%E5%BB%BAHEXO%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">Dockerfile构建HEXO项目部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%BC%96%E5%86%99Dockerfile\"><span class=\"toc-text\">1.编写Dockerfile</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">2.构建镜像</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">3.运行镜像</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%AE%BF%E9%97%AE%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">4.访问项目</span></a></li></ol></li></ol></li></ol>","author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Docker搭建redis集群","uid":"8ac33153f9328c8a2ab7b8c7aad02bd2","slug":"Docker-redis集群","date":"2022-10-02T02:34:20.000Z","updated":"2022-10-24T05:13:37.288Z","comments":true,"path":"api/articles/Docker-redis集群.json","keywords":null,"cover":"/images/Docker-redis集群/redis-docker.png","text":" 1、创建网卡[root@vm22 home]# docker network create redis --subnet 172.38.0.0&#x2F;16 39b4f9f17a4f49a5362c1ddc11c516841e2d1fac03aae3dc484f8f22fed...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Docker","slug":"Docker","count":6,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"}],"author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Docker网络详解","uid":"2e8be22ca0c67568a1ab56634abc99c8","slug":"Docker网络详解","date":"2021-10-29T02:23:20.000Z","updated":"2022-10-24T05:03:29.459Z","comments":true,"path":"api/articles/Docker网络详解.json","keywords":null,"cover":"/images/docker/docker.png","text":" 理解Docker0ip addr #查看本机网络网卡有三个网络问题：Docker是如何处理容器网络访问的？ [root@vm22 ~]# docker run -d -P --name tomcat01 tomcat #查看容器内部网络地址 ip addr 或者 dcoker ...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"Docker","slug":"Docker","count":6,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"}],"author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}