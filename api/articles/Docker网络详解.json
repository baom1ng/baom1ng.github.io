{"title":"Docker网络详解","uid":"2e8be22ca0c67568a1ab56634abc99c8","slug":"Docker网络详解","date":"2022-10-07T02:23:20.000Z","updated":"2022-10-24T04:09:18.317Z","comments":true,"path":"api/articles/Docker网络详解.json","keywords":null,"cover":"/images/docker/docker.png","content":"<p><img src=\"/images/Docker%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3/1240-20221024120511848.png\" alt=\"Docker1.png\"></p>\n<h3 id=\"理解Docker0\"><a href=\"#理解Docker0\" class=\"headerlink\" title=\"理解Docker0\"></a>理解Docker0</h3><p><code>ip addr #查看本机网络</code><br><img src=\"/images/Docker%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3/1240-20221024120512035.png\" alt=\"ip addr.png\"><br>网卡有三个网络<br><code>问题：Docker是如何处理容器网络访问的？</code><br><img src=\"/images/Docker%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3/1240-20221024120511957.png\" alt=\"image01.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@vm22 ~]# docker run -d -P --name tomcat01 tomcat\n#查看容器内部网络地址 ip addr 或者 dcoker inspect\n[root@vm22 ~]# docker inspect tomcat01\n&quot;Networks&quot;: &#123;\n                &quot;bridge&quot;: &#123;\n                    &quot;IPAMConfig&quot;: null,\n                    &quot;Links&quot;: null,\n                    &quot;Aliases&quot;: null,\n                    &quot;NetworkID&quot;: &quot;2893fe225a852d859fb8e831ff668623b9f220c3f47a8b1b83bb31691a8961b5&quot;,\n                    &quot;EndpointID&quot;: &quot;a6dca6dc3b938d365f9e0cffdc0944e0ce94dd980c5cde5826dfaf6ce3323ea5&quot;,\n                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,\n                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,  # Docker分配的ip地址\n                    &quot;IPPrefixLen&quot;: 16,\n                    &quot;IPv6Gateway&quot;: &quot;&quot;,\n                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,\n                    &quot;GlobalIPv6PrefixLen&quot;: 0,\n                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,\n                    &quot;DriverOpts&quot;: null\n                &#125;\n            &#125;\n# 可以看到我在Linux上可以ping通容器\n[root@vm22 ~]# ping 172.17.0.2\nPING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.\n64 bytes from 172.17.0.2: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.729 ms\n64 bytes from 172.17.0.2: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.111 ms\n64 bytes from 172.17.0.2: icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.135 ms</code></pre>\n<h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ol>\n<li>我们每启动一个docker容器，docker就会给容器分配一个IP地址，我们只要安装了docker，就会有一个网卡docker0。</li>\n</ol>\n<ul>\n<li>Docker 桥接模式，使用了evth-pair技术！</li>\n</ul>\n<hr>\n<p>我们每启动一个容器，我们的主机就就会多一对网卡<br><img src=\"/images/Docker%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3/1240-20221024120511997.png\" alt=\"ip addr2.png\"><br>2. 我们发现容器的网卡都是成对的</p>\n<ul>\n<li>evth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一端连接协议，一端相互连接</li>\n<li>正因为有这个特性，evth-pair 充当一个桥梁，连接各种虚拟网络设备</li>\n<li>Openstac，Docker容器之间的连接，OVS的连接，都使用 ecth-pair 技术</li>\n</ul>\n<ol start=\"3\">\n<li>容器之间是可以互相通讯的<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root@7f57cd426938:&#x2F;usr&#x2F;local&#x2F;tomcat# ping 172.17.0.3\nPING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.\n64 bytes from 172.17.0.3: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.104 ms\n64 bytes from 172.17.0.3: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.113 ms</code></pre>\n<img src=\"/images/Docker%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3/1240-20221024120511977.png\" alt=\"imag1.png\"><br>结论：tomcat01和tomcat02公用一个路由docker0<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>小结<br>Docker使用的Linux的桥接网络，宿主机中是一个Docker容器的网桥 Docker0<br><img src=\"/Users/johnny/Documents/images/Docker%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3/1240-20221024120512071.png\" alt=\"image2.png\"></p></blockquote>\n</li>\n</ol>\n<ul>\n<li>Docker中的所有网络接口都是虚拟的。</li>\n<li>只要删除容器，对应的网桥就被删除。<h3 id=\"–link\"><a href=\"#–link\" class=\"headerlink\" title=\"–link\"></a>–link</h3></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在我们搭建服务中，database url=IP，项目不重启，但是数据库ip换掉了，针对这种情况我们可以使用容器的名称来访问容器。</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 我们直接通过容器的名称去ping发现ping不通\n[root@vm22 ~]# docker exec -it tomcat01 ping tomcat02\nping: tomcat02: No address associated with hostname\n\n# 在启动容器时使用--link命令将tomcat02和tomcat03进行连接\n[root@vm22 ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat:full\n75659bb40133489c9c6e14bd33bc30325cd1449fadec648f7e8fdf8a0b0e2a32\n\n# 使用--link命令后我们发现tomcat03可以直接通过容器名称连接tomcat02\n[root@vm22 ~]# docker exec -it tomcat03 ping tomcat02\nPING tomcat02 (172.17.0.3) 56(84) bytes of data.\n64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.176 ms\n64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.074 ms\n\n#但是我们反向无法ping通\n[root@vm22 ~]# docker exec -it tomcat02 ping tomcat03\nping: tomcat03: No address associated with hostname</code></pre>\n<p>我们可以看到在tomcat03中配置了tomcat02的地址</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@vm22 ~]# docker exec -it tomcat03 cat &#x2F;etc&#x2F;hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      tomcat02 0f01224e35e7\n172.17.0.4      75659bb40133</code></pre>\n<p>–link 就是我们在hosts中增加了一个tomcat02的映射<br>我们实际使用中不建议使用 –link，我们使用自定义网络来实现容器之前的互联</p>\n<h3 id=\"自定义网络\"><a href=\"#自定义网络\" class=\"headerlink\" title=\"自定义网络\"></a>自定义网络</h3><hr>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>查看所有的Docker网络</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@vm22 ~]# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n2893fe225a85   bridge    bridge    local\n9612893a759b   host      host      local\nd67b91c2d6f8   none      null      local</code></pre>\n<h4 id=\"网络模式\"><a href=\"#网络模式\" class=\"headerlink\" title=\"网络模式\"></a>网络模式</h4><p>bridge：桥接 docker（默认），自定义网络使用bridge<br>none：不配置网络<br>host：和宿主机共享网络<br>container：容器之间网络连通<br><strong>创建一个自定义网络</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 自定义一个名为mynet的网络\n#  --driver bridge\n#  --subnet 192.168.0.0&#x2F;24\n#  --gateway 192.168.0.1\n[root@vm22 ~]# docker network create --driver bridge --subnet 192.168.0.0&#x2F;24 --gateway 192.168.0.1 mynet\nbe625b138967ed399a64b6a96fbaade1e702ed6c7c07f66b59528e8077e44339\n\n[root@vm22 ~]# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n2893fe225a85   bridge    bridge    local\n9612893a759b   host      host      local\nbe625b138967   mynet     bridge    local\nd67b91c2d6f8   none      null      local\n\n# 测试容器之间的连接\n[root@vm22 ~]# docker exec -it tomcat1 ping tomcat2\nPING tomcat2 (192.168.0.3) 56(84) bytes of data.\n64 bytes from tomcat2.mynet (192.168.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.626 ms\n64 bytes from tomcat2.mynet (192.168.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.218 ms</code></pre>\n<h4 id=\"网络连通\"><a href=\"#网络连通\" class=\"headerlink\" title=\"网络连通\"></a>网络连通</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#在docker0上创建tomcat3\n[root@vm22 ~]# docker run -d -P --name tomcat3 tomcat:full\n5c7b8afd60f532a0a50fe570ffcad8a5a40cd0ab946ddc51449140a0dbbd776f\n#测试tomcat3是否能与tomcat1连通\n[root@vm22 ~]# docker exec -it tomcat3 ping tomcat1\nping: tomcat1: No address associated with hostname\n#使用命令 docker network connect 连接两个网络\n[root@vm22 ~]# docker network connect mynet tomcat3\n[root@vm22 ~]# docker exec -it tomcat3 ping tomcat1\nPING tomcat1 (192.168.0.3) 56(84) bytes of data.\n64 bytes from tomcat1.mynet (192.168.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.063 ms\n64 bytes from tomcat1.mynet (192.168.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.263 ms</code></pre>\n<p><strong>如果需要容器间相互连接，就需要使用docker network connect连接！</strong></p>\n","feature":true,"text":" 理解Docker0ip addr #查看本机网络网卡有三个网络问题：Docker是如何处理容器网络访问的？ [root@vm22 ~]# docker run -d -P --name tomcat01 tomcat #查看容器内部网络地址 ip addr 或者 dcoker ...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"Docker","slug":"Docker","count":4,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":4,"path":"api/tags/Docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%A7%A3Docker0\"><span class=\"toc-text\">理解Docker0</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">原理：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%80%93link\"><span class=\"toc-text\">–link</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">自定义网络</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">网络模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E8%BF%9E%E9%80%9A\"><span class=\"toc-text\">网络连通</span></a></li></ol></li></ol>","author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Docker的基础命令","uid":"6ec80148ccdf0bae5b573fc594b500be","slug":"Docker的基础命令","date":"2022-09-29T07:03:20.000Z","updated":"2022-10-24T03:55:52.284Z","comments":true,"path":"api/articles/Docker的基础命令.json","keywords":null,"cover":"/images/docker/docker.png","text":" 帮助命令 docker version #显示docker的版本信息 docker info #显示dcoker的系统信息，包括镜像和容器的数量 docker [命令] --help #帮助命令 docker官方文档地址：https://docs.docker.com/comp...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Docker","slug":"Docker","count":4,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":4,"path":"api/tags/Docker.json"}],"author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}