{"title":"Nginx快速入门","uid":"01b2f95cf7b3ad8e6df19f8a3034e6c8","slug":"Nginx快速入门","date":"2020-06-22T10:23:05.000Z","updated":"2022-10-20T08:51:47.811Z","comments":true,"path":"api/articles/Nginx快速入门.json","keywords":null,"cover":"/images/Nginx快速入门/nginx01.png","content":"<p><img src=\"/images/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/nginx01.png\" alt=\"nginx01.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Nginx(“engine x”)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。<br><strong>在高连接并发的情况下，Nginx是Apache服务器不错的替代品。</strong><br>##安装Nginx<br>这里我用CentOS为例：<br>1.安装先决条件</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ yum install yum-utils</code></pre>\n<p>2.设置yum存储库，将下面内容写入/etc/yum.repos.d/nginx.repo</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo\n[nginx-stable]\nname&#x3D;nginx stable repo\nbaseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;\ngpgcheck&#x3D;1\nenabled&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;nginx.org&#x2F;keys&#x2F;nginx_signing.key\nmodule_hotfixes&#x3D;true</code></pre>\n<p>3.安装Nginx</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ yum update\n$ yum install nginx</code></pre>\n<p>4.验证是否安装成功<br>启动Nginx</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nginx\n查看端口80已被nginx监听\n$ netstat -ntlp\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      666&#x2F;sshd            \ntcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      799&#x2F;master          \ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      23779&#x2F;nginx: master \ntcp6       0      0 :::22                   :::*                    LISTEN      666&#x2F;sshd            \ntcp6       0      0 ::1:25                  :::*                    LISTEN      799&#x2F;master</code></pre>\n<p>5.设置防火墙<br>如果在浏览器里输入ip地址发现无法访问此网站，那有可能是防火墙80端口没有开放。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">编辑iptables配置文件\n$ vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables\n添加开放80端口\n -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEP\n重启iptables\n$ systemctl restart iptables</code></pre>\n<p>们刷新页面出现Welcome to nginx!说明安装配置成功<br>![welcone nginx.png](/images/Nginx快速入门/welcome to nginx.png)<br>##Nginx常用命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nginx           — 启动Nginx\n$ nginx -t        — 检查Nginx配置文件\n$ nginx -s stop   — 快速关闭\n$ nginx -s quit   — 正常关闭\n$ nginx -s reload — 重新加载配置文件\n$ nginx -s reopen — 重新打开日志文件</code></pre>\n<p>##Nginx主模块<br>基本命令<br><strong>daemon</strong><br><code>语法: daemon on | off</code><br><code>缺省值:on</code><br>是否以守护进程的方式运行nginx，守护进程是指脱离终端并且在后台运行的进程，关闭守护进程可以方便我们调试nginx。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">daemon off;</code></pre>\n<p><strong>master_process</strong><br><code>语法:master_process on | off</code><br><code>缺省值:on</code><br>是否以master/worker方式逬行工作，在实际的环境中nginx是以一个master逬程管理多个worker进程的方式运行的，<br>关闭后nginx就不会fork出worker子进程来处理请求，而是用master进程自身来处理请求worker_processes number;默认1,在master/worker运行方式下worker进程的数目，一般情况下用户要配置与CPU内核数相等的worker进程。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">master_process off;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>生产环境中不要使用”daemon”和”master_process”指令，这些选项仅用于开发调试。</p></blockquote>\n<p><strong>error_log</strong><br><code>语法:error_log file [ debug | info | notice | warn | error | crit ]</code><br><code>缺省值:$&#123;prefix&#125;/logs/error.log</code><br>Nginx 添加 –with-debug 编译参数, 你还能够使用以下配置:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">error_log LOGFILE [ debug_core | debug_alloc | debug_mutex | debug_event\n]: | debug_http | debug_imap ;</code></pre>\n<p><strong>include</strong><br><code>语法:include file | *</code><br><code>缺省值:none</code><br>你可以在任意地方使用include指令实现配置文件的包含，类似于apache中的include方法，可减少主配置文件。</p>\n<pre class=\"line-numbers language-include\" data-language=\"include\"><div class=\"caption\"><span>```指令还支持像下面配置一样的全局包含的方法，例如包含一个目录下所有以\".conf\"结尾的文件:</span></div><code class=\"language-include\">&#96;&#96;&#96;\ninclude vhosts&#x2F;*.conf;</code></pre>\n<p><strong>pid</strong><br><code>语法:pid file</code><br><code>缺省值:compile-time option Example:</code><br>进程id存储文件。可以使用 kill -HUP cat /var/log/nginx.pid\\ 对Nginx进行配置文件重新加载。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pid &#x2F;var&#x2F;log&#x2F;nginx.pid;</code></pre>\n<p><strong>user</strong><br><code>语法:user user [group]</code><br><code>缺省值:nobody nobody</code><br>指定Nginx Worker进程运行用户，默认是nobody帐号。</p>\n<p>例如:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">user www users;</code></pre>\n<p><strong>worker_processes</strong><br><code>语法:worker_processes number</code><br><code>缺省值:1</code><br>nginx可以使用多个worker进程，原因如下：</p>\n<p>1.使用SMP<br>2.当工作程序在磁盘I / O上阻塞时减少延迟<br>3.当使用select（）/ poll（）时限制每个进程的连接数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">worker_processes 4;</code></pre>\n<p>##Nginx处理HTTP的核心功能模块</p>\n<p>基本指令<br><strong>alias</strong><br><code>语法:alias file-path|directory-path;</code><br><code>缺省值:no</code><br><code>使用字段:location</code><br>该伪指令分配用于指定位置的路径。 请注意，它看起来类似于root伪指令，但是文档root不会改变，只是用于请求的文件系统路径。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">location  &#x2F;i&#x2F; &#123;\n alias   &#x2F;spool&#x2F;w3&#x2F;images&#x2F;;\n&#125;\n# 请求“ &#x2F;i&#x2F;1.jpg”将返回文件“ &#x2F;spool&#x2F;w3&#x2F;images&#x2F;1.jpg</code></pre>\n<p><strong>keepalive_timeout</strong><br><code>语法: keepalive_timeout [ time ]</code><br><code>缺省值:keepalive_timeout 75</code><br><code>使用字段:http, server, location</code><br>第一个参数为与客户端的保持活动连接分配超时。 在此时间之后，服务器将关闭连接。</p>\n<p>可选的第二个参数指定了答应头<code>Keep-Alive: timeout=time</code>的```time````值，这个值可以使一些浏览器知道什么时候关闭连接，以便使服务器不用重复关闭，如果不指定这个参数，nginx不会在答应头中发送Keep-Alive信息。</p>\n<p>下面列出了一些服务器如何处理包含Keep-Alive的答应头：</p>\n<ul>\n<li>MSIE和Opera会忽略“ Keep-Alive：timeout = <N>”标头。</li>\n<li>MSIE使连接保持活动状态约60-65秒，然后发送TCP RST。</li>\n<li>Opera可以长时间保持连接状态。</li>\n<li>Mozilla使连接保持活动状态N大约1-10秒。</li>\n<li>Konqueror使连接保持活动状态约N秒钟。</li>\n</ul>\n<p><strong>listen</strong><br><code>语法:listen address:port [ default [ backlog=num | rcvbuf=size | sndbuf=size | accept_filter=filter | deferred | bind | ssl ] ]</code><br><code>缺省值:listen 80</code><br><code>使用字段:server</code><br>listen指令指定封闭服务器{…}块接受的地址和端口。 可以仅指定地址，仅端口或服务器名称作为地址。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">listen 127.0.0.1:8000;\nlisten 127.0.0.1;\nlisten 8000;\nlisten *:8000;\nlisten localhost:8000;</code></pre>\n<p>IPv6地址（0.7.36）设置：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">listen [::]:8000; \nlisten [fe80::1];</code></pre>\n<p><strong>location</strong><br><code>语法:location [=|~|~*|^~] /uri/ &#123; ... &#125;</code><br><code>缺省值:no</code><br><code>使用字段:server</code><br>这个参数根据URL的不同需求来进行配置，可以使用字符串与正则表达式匹配，如果要使用正则表达式，你必须指定下列前缀：</p>\n<ol>\n<li>~*不区分大小写</li>\n<li>～区分大小写<pre class=\"line-numbers language-none\"><code class=\"language-none\">location  &#x3D; &#x2F; &#123;\n  # 只匹配 &#x2F; 的查询\n  [ configuration A ] \n&#125;\nlocation  &#x2F; &#123;\n  # 匹配任何以 &#x2F; 开头的查询\n  # 但是正则表达式与一些较长的字符串将首先匹配\n  [ configuration B ] \n&#125;\nlocation ^~ &#x2F;images&#x2F; &#123;\n  # 匹配任何以&#x2F;images&#x2F;开始的查询并且停止搜索，不检查正则表达式\n  [ configuration C ] \n&#125;\nlocation ~* \\.(gif|jpg|jpeg)$ &#123;\n  # 匹配任何以gif,jpg,jpeg结尾的文件，但是所有&#x2F;images&#x2F;目录请求将在Configuration C 中处理\n  [ configuration D ] \n&#125;</code></pre></li>\n</ol>\n<p><strong>resolver_timeout</strong><br><code>语法:resolver_timeout time</code><br><code>使用字段:http,server,location</code><br>解析超时时间。如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">resolver_timeout 5s;</code></pre>\n<p><strong>root</strong><br><code>语法:root path</code><br><code>缺省值:root html</code><br><code>使用字段:http,server,location,location中if字段</code><br>请求到达后的文件根目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">location  &#x2F;i&#x2F;  &#123;\n  root  &#x2F;spool&#x2F;w3\n&#125;</code></pre>\n<p>如果亲求/i/top.jpg文件，nginx将转到/spool/w3/i/top.jpg文件。你可以在参数中使用变量。<br>注意：在亲求中root会添加这个location到它的后面，即/i/top.jpg并不会请求/spool/w3/i/top.jpg文件，如果要实现上述类似与apache alias的功能，可以使用alias指令。<br><strong>server</strong><br><code>语法:server&#123;...&#125;</code><br><code>缺省值:no</code><br><code>使用字段:http</code><br>server字段包含虚拟主机的配置。<br>没有明确的机制来分开基于域名（请求中的主机头）和基于IP的虚拟主机。<br>可以通过listen指令来指定必须连接到这个server块的所有地址和端口，并且在server_name指令中可以指定所有的域名。<br><strong>server_name</strong><br><code>语法:server_name name [...]</code><br><code>使用字段:server</code><br>将HTTP请求的主机头与nginx配置文件中的server字段中指定的参数进行匹配，并且找出第一个匹配结果。</p>\n<ol>\n<li>完整的静态名称</li>\n<li>名称开头带有通配符的名称— * .example.com</li>\n<li>名称末尾带有通配符的名称<a href=\"http://www.example/\">www.example</a>.*</li>\n<li>具有正则表达式的名称</li>\n</ol>\n<p>如果不匹配，将根据以下顺序使用配置文件中的[#server服务器{…}]块：</p>\n<ol>\n<li>listen指令被标记为default的server字段</li>\n<li>第一个出现listen的server字段</li>\n</ol>\n","feature":true,"text":" Nginx(“engine x”)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。在高连接并发的情况下，Nginx是Apache服务器不错的替代品。##安装Nginx这里我用Cen...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"Nginx","slug":"Nginx","count":2,"path":"api/categories/Nginx.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":2,"path":"api/tags/Nginx.json"},{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"}],"toc":"","author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Docker的基础命令","uid":"6ec80148ccdf0bae5b573fc594b500be","slug":"Docker的基础命令","date":"2022-09-29T07:03:20.000Z","updated":"2022-10-24T03:55:52.284Z","comments":true,"path":"api/articles/Docker的基础命令.json","keywords":null,"cover":"/images/docker/docker.png","text":" 帮助命令 docker version #显示docker的版本信息 docker info #显示dcoker的系统信息，包括镜像和容器的数量 docker [命令] --help #帮助命令 docker官方文档地址：https://docs.docker.com/comp...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Docker","slug":"Docker","count":4,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":4,"path":"api/tags/Docker.json"}],"author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Samba快速入门","uid":"d5477574fa77bf54e6e43f047273c678","slug":"Samba快速入门","date":"2022-08-29T09:35:23.000Z","updated":"2022-10-24T03:17:54.329Z","comments":true,"path":"api/articles/Samba快速入门.json","keywords":null,"cover":"/images/samba.jpg","text":"安装Samba[root@localhost ~]# yum install samba -y [root@localhost ~]# cd &#x2F;etc&#x2F;samba&#x2F; [root@localhost samba]# ls lmhosts smb.con...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"教程","slug":"教程","count":3,"path":"api/categories/教程.json"}],"tags":[{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"},{"name":"教程","slug":"教程","count":3,"path":"api/tags/教程.json"}],"author":{"name":"Johnny","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"Welcome to my blog <br/> I'm Johnny Bao.-a DevOps.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}